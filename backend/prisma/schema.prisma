// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id  String  @id @default(uuid())
  email String @unique
  name String 
  password String
  credits Int @default(3)
  isPremium Boolean @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  conversations Conversation[]
  paymentHistory PaymentHistory[]
  subscriptions Subscription[]
}

model Conversation {
  id        String   @id @default(uuid())
  userId    String
  title     String   @default("Untitled")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now())@updatedAt
  user      User     @relation(fields: [userId], references: [id])

  messages  Message[]
}

model Message {
  id             String      @id @default(uuid())
  conversationId String
  content        String
  role           String
  createdAt        DateTime    @default(now())
  updatedAt        DateTime   @default(now()) @updatedAt

  conversation   Conversation @relation(fields: [conversationId], references: [id])
}

model PaymentHistory {
  paymentId String @id @default(uuid())
  status String
  paymentMethod String
  cfPaymentId String?
  bankReference String?
  amount Float
  currency String
  userId String
  createdAt        DateTime    @default(now())
  updatedAt        DateTime    @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Subscription {
  id  String @id @default(uuid())
  userId String
  currency String
  planId String
  subscriptionId String
  startDate  DateTime
  endDate DateTime
  isActive Boolean @default(true)
  creditsGranted Int @default(0)
  createdAt        DateTime    @default(now())
  updatedAt        DateTime   @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}